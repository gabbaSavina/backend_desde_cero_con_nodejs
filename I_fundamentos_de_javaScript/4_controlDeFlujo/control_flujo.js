// ==============================
// Control de Flujo en JavaScript
// ==============================

/*
üìå El control de flujo permite ejecutar diferentes bloques de c√≥digo 
seg√∫n ciertas condiciones o repetir acciones m√∫ltiples veces.

üîπ if / else if / else ‚Üí decisiones condicionales
üîπ switch ‚Üí m√∫ltiples opciones
üîπ while / do...while / for ‚Üí bucles o repeticiones
üîπ break / continue ‚Üí modificar el comportamiento de un bucle
*/


// ==============================
// 1. Sentencia if / else if / else
// ==============================

let temperatura = 30;

// Verificamos la temperatura y mostramos un mensaje adecuado
if (temperatura > 30) {
    console.log("Hace mucho calor");
} else if (temperatura >= 20) {
    console.log("El clima es agradable");
} else {
    console.log("Hace fr√≠o");
}


// ==============================
// 2. Sentencia switch
// ==============================

let dia = "lunes";

// Evaluamos diferentes valores posibles de 'dia'
switch (dia) {
    case "lunes":
        console.log("Comienza la semana");
        break; // corta la ejecuci√≥n del switch aqu√≠
    case "viernes":
        console.log("√öltimo d√≠a laboral");
        break;
    case "s√°bado":
    case "domingo":
        console.log("Es fin de semana");
        break;
    default:
        console.log("D√≠a no reconocido");
        break;
}


// ==============================
// 3. Bucle while
// ==============================

let contador = 0;

// Repite el bloque mientras la condici√≥n sea verdadera
while (contador < 3) {
    console.log("while -> Contador:", contador);
    contador++; // incrementamos para evitar bucle infinito
}


// ==============================
// 4. Bucle do...while
// ==============================

let numero = 0;

/*
Este bucle siempre se ejecuta al menos una vez,
porque eval√∫a la condici√≥n despu√©s de ejecutar el bloque
*/
do {
    console.log("do...while -> N√∫mero:", numero);
    numero++;
} while (numero < 3);


// ==============================
// 5. Bucle for
// ==============================

/*
for tiene tres partes:
1. inicializaci√≥n -> let i = 0
2. condici√≥n -> i < 3
3. incremento -> i++
*/
for (let i = 0; i < 3; i++) {
    console.log("for -> Iteraci√≥n:", i);
}


// ==============================
// 6. break y continue en bucles
// ==============================

/*
üîπ continue: salta la iteraci√≥n actual y sigue con la siguiente
üîπ break: rompe el bucle completamente
*/
for (let i = 1; i <= 5; i++) {
    if (i === 3) {
        continue; // Salta el n√∫mero 3
    }
    if (i === 5) {
        break; // Sale del bucle cuando i es 5
    }
    console.log("Bucle con continue/break:", i);
}
